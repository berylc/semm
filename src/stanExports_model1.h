// Generated by rstantools.  Do not edit by hand.

/*
    semm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    semm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with semm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_model1_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_model1");
    reader.add_event(54, 52, "end", "model_model1");
    return reader;
}
#include <stan_meta_header.hpp>
class model_model1 : public prob_grad {
private:
        int N;
        int M;
        matrix_d B;
        matrix_d SE;
        int K;
        vector_d zeros;
        std::vector<matrix_d> SE_mat;
public:
    model_model1(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_model1(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_model1_namespace::model_model1";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 4;
            validate_non_negative_index("B", "N", N);
            validate_non_negative_index("B", "M", M);
            context__.validate_dims("data initialization", "B", "matrix_d", context__.to_vec(N,M));
            B = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, M);
            vals_r__ = context__.vals_r("B");
            pos__ = 0;
            size_t B_j_2_max__ = M;
            size_t B_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                    B(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("SE", "N", N);
            validate_non_negative_index("SE", "M", M);
            context__.validate_dims("data initialization", "SE", "matrix_d", context__.to_vec(N,M));
            SE = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, M);
            vals_r__ = context__.vals_r("SE");
            pos__ = 0;
            size_t SE_j_2_max__ = M;
            size_t SE_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < SE_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < SE_j_1_max__; ++j_1__) {
                    SE(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            // initialize transformed data variables
            current_statement_begin__ = 9;
            validate_non_negative_index("zeros", "M", M);
            zeros = Eigen::Matrix<double, Eigen::Dynamic, 1>(M);
            stan::math::fill(zeros, DUMMY_VAR__);
            current_statement_begin__ = 10;
            validate_non_negative_index("SE_mat", "M", M);
            validate_non_negative_index("SE_mat", "M", M);
            validate_non_negative_index("SE_mat", "N", N);
            SE_mat = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(M, M));
            stan::math::fill(SE_mat, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 12;
            stan::math::assign(zeros, rep_vector(0, M));
            current_statement_begin__ = 15;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 16;
                stan::model::assign(SE_mat, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            diag_matrix(to_vector(get_base1(SE, n, "SE", 1))), 
                            "assigning variable SE_mat");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 21;
            validate_non_negative_index("pi", "K", K);
            num_params_r__ += (K - 1);
            current_statement_begin__ = 22;
            validate_non_negative_index("L_Omega", "M", M);
            validate_non_negative_index("L_Omega", "M", M);
            num_params_r__ += ((M * (M - 1)) / 2);
            current_statement_begin__ = 23;
            validate_non_negative_index("tau", "M", M);
            num_params_r__ += M;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_model1() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 21;
        if (!(context__.contains_r("pi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pi");
        pos__ = 0U;
        validate_non_negative_index("pi", "K", K);
        context__.validate_dims("parameter initialization", "pi", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> pi(K);
        size_t pi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
            pi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(pi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("L_Omega")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_Omega missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_Omega");
        pos__ = 0U;
        validate_non_negative_index("L_Omega", "M", M);
        validate_non_negative_index("L_Omega", "M", M);
        context__.validate_dims("parameter initialization", "L_Omega", "matrix_d", context__.to_vec(M,M));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega(M, M);
        size_t L_Omega_j_2_max__ = M;
        size_t L_Omega_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                L_Omega(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_Omega);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_Omega: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "M", M);
        context__.validate_dims("parameter initialization", "tau", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau(M);
        size_t tau_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            tau(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 21;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pi;
            (void) pi;  // dummy to suppress unused var warning
            if (jacobian__)
                pi = in__.simplex_constrain(K, lp__);
            else
                pi = in__.simplex_constrain(K);
            current_statement_begin__ = 22;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Omega;
            (void) L_Omega;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Omega = in__.cholesky_factor_corr_constrain(M, lp__);
            else
                L_Omega = in__.cholesky_factor_corr_constrain(M);
            current_statement_begin__ = 23;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.vector_lb_constrain(0, M, lp__);
            else
                tau = in__.vector_lb_constrain(0, M);
            // transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("Sigma", "M", M);
            validate_non_negative_index("Sigma", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Sigma(M, M);
            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma, DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("Sigmas", "M", M);
            validate_non_negative_index("Sigmas", "M", M);
            validate_non_negative_index("Sigmas", "K", K);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > Sigmas(K, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(M, M));
            stan::math::initialize(Sigmas, DUMMY_VAR__);
            stan::math::fill(Sigmas, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 29;
            stan::math::assign(Sigma, multiply(diag_pre_multiply(tau, L_Omega), transpose(diag_pre_multiply(tau, L_Omega))));
            current_statement_begin__ = 31;
            stan::model::assign(Sigmas, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        diag_matrix(rep_vector(0, M)), 
                        "assigning variable Sigmas");
            current_statement_begin__ = 32;
            stan::model::assign(Sigmas, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        Sigma, 
                        "assigning variable Sigmas");
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 27;
            size_t Sigma_j_1_max__ = M;
            size_t Sigma_j_2_max__ = M;
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Sigma(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Sigma" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 28;
            size_t Sigmas_k_0_max__ = K;
            size_t Sigmas_j_1_max__ = M;
            size_t Sigmas_j_2_max__ = M;
            for (size_t k_0__ = 0; k_0__ < Sigmas_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < Sigmas_j_1_max__; ++j_1__) {
                    for (size_t j_2__ = 0; j_2__ < Sigmas_j_2_max__; ++j_2__) {
                        if (stan::math::is_uninitialized(Sigmas[k_0__](j_1__, j_2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: Sigmas" << "[" << k_0__ << "]" << "(" << j_1__ << ", " << j_2__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Sigmas: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            // model body
            current_statement_begin__ = 37;
            lp_accum__.add(cauchy_log<propto__>(tau, 0, 2.5));
            current_statement_begin__ = 38;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Omega, 2));
            current_statement_begin__ = 39;
            lp_accum__.add(dirichlet_log<propto__>(pi, rep_vector(1, K)));
            current_statement_begin__ = 41;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 42;
                lp_accum__.add(log_mix(get_base1(pi, 1, "pi", 1), multi_normal_log(get_base1(B, n, "B", 1), zeros, add(get_base1(SE_mat, n, "SE_mat", 1), get_base1(Sigmas, 1, "Sigmas", 1))), multi_normal_log(get_base1(B, n, "B", 1), zeros, add(get_base1(SE_mat, n, "SE_mat", 1), get_base1(Sigmas, 2, "Sigmas", 1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("pi");
        names__.push_back("L_Omega");
        names__.push_back("tau");
        names__.push_back("Sigma");
        names__.push_back("Sigmas");
        names__.push_back("Omegacor");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(M);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(M);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_model1_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> pi = in__.simplex_constrain(K);
        size_t pi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
            vars__.push_back(pi(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega = in__.cholesky_factor_corr_constrain(M);
        size_t L_Omega_j_2_max__ = M;
        size_t L_Omega_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                vars__.push_back(L_Omega(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau = in__.vector_lb_constrain(0, M);
        size_t tau_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            vars__.push_back(tau(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("Sigma", "M", M);
            validate_non_negative_index("Sigma", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma(M, M);
            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma, DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("Sigmas", "M", M);
            validate_non_negative_index("Sigmas", "M", M);
            validate_non_negative_index("Sigmas", "K", K);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > Sigmas(K, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(M, M));
            stan::math::initialize(Sigmas, DUMMY_VAR__);
            stan::math::fill(Sigmas, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 29;
            stan::math::assign(Sigma, multiply(diag_pre_multiply(tau, L_Omega), transpose(diag_pre_multiply(tau, L_Omega))));
            current_statement_begin__ = 31;
            stan::model::assign(Sigmas, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        diag_matrix(rep_vector(0, M)), 
                        "assigning variable Sigmas");
            current_statement_begin__ = 32;
            stan::model::assign(Sigmas, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        Sigma, 
                        "assigning variable Sigmas");
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t Sigma_j_2_max__ = M;
                size_t Sigma_j_1_max__ = M;
                for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                        vars__.push_back(Sigma(j_1__, j_2__));
                    }
                }
                size_t Sigmas_j_2_max__ = M;
                size_t Sigmas_j_1_max__ = M;
                size_t Sigmas_k_0_max__ = K;
                for (size_t j_2__ = 0; j_2__ < Sigmas_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Sigmas_j_1_max__; ++j_1__) {
                        for (size_t k_0__ = 0; k_0__ < Sigmas_k_0_max__; ++k_0__) {
                            vars__.push_back(Sigmas[k_0__](j_1__, j_2__));
                        }
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 49;
            validate_non_negative_index("Omegacor", "M", M);
            validate_non_negative_index("Omegacor", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Omegacor(M, M);
            stan::math::initialize(Omegacor, DUMMY_VAR__);
            stan::math::fill(Omegacor, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 51;
            stan::math::assign(Omegacor, multiply_lower_tri_self_transpose(L_Omega));
            // validate, write generated quantities
            current_statement_begin__ = 49;
            size_t Omegacor_j_2_max__ = M;
            size_t Omegacor_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < Omegacor_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Omegacor_j_1_max__; ++j_1__) {
                    vars__.push_back(Omegacor(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_model1";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_Omega_j_2_max__ = M;
        size_t L_Omega_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Omega" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t tau_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Sigma_j_2_max__ = M;
            size_t Sigma_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Sigmas_j_2_max__ = M;
            size_t Sigmas_j_1_max__ = M;
            size_t Sigmas_k_0_max__ = K;
            for (size_t j_2__ = 0; j_2__ < Sigmas_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigmas_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < Sigmas_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "Sigmas" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t Omegacor_j_2_max__ = M;
        size_t Omegacor_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < Omegacor_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Omegacor_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omegacor" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pi_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_Omega_j_1_max__ = ((M * (M - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Omega" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Sigma_j_2_max__ = M;
            size_t Sigma_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Sigmas_j_2_max__ = M;
            size_t Sigmas_j_1_max__ = M;
            size_t Sigmas_k_0_max__ = K;
            for (size_t j_2__ = 0; j_2__ < Sigmas_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigmas_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < Sigmas_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "Sigmas" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t Omegacor_j_2_max__ = M;
        size_t Omegacor_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < Omegacor_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Omegacor_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omegacor" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_model1_namespace::model_model1 stan_model;
#endif
